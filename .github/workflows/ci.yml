name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      web: ${{ steps.changes.outputs.web }}
      mobile: ${{ steps.changes.outputs.mobile }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'shared/**'
            web:
              - 'web/**'
              - 'shared/**'
            mobile:
              - 'mobile/**'
              - 'shared/**'
            shared:
              - 'shared/**'
              - 'package.json'
              - '.eslintrc.js'
              - '.prettierrc.js'

  lint-and-typecheck:
    name: Lint & TypeCheck
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.mobile == 'true' || needs.changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Lint shared package
        if: needs.changes.outputs.shared == 'true'
        run: npm run lint:shared

      - name: TypeCheck shared package
        if: needs.changes.outputs.shared == 'true'
        run: npm run typecheck:shared

      - name: Lint backend
        if: needs.changes.outputs.backend == 'true'
        run: npm run lint:backend

      - name: TypeCheck backend
        if: needs.changes.outputs.backend == 'true'
        run: npm run typecheck:backend

      - name: Lint web
        if: needs.changes.outputs.web == 'true'
        run: npm run lint:web

      - name: TypeCheck web
        if: needs.changes.outputs.web == 'true'
        run: npm run typecheck:web

      - name: Lint mobile
        if: needs.changes.outputs.mobile == 'true'
        run: npm run lint:mobile

      - name: TypeCheck mobile
        if: needs.changes.outputs.mobile == 'true'
        run: npm run typecheck:mobile

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.mobile == 'true' || needs.changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        node-version: [18, 20]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Test shared package
        if: needs.changes.outputs.shared == 'true'
        run: npm run test:shared

      - name: Test backend
        if: needs.changes.outputs.backend == 'true'
        run: npm run test:backend
        env:
          REDIS_URL: redis://localhost:6379

      - name: Test web
        if: needs.changes.outputs.web == 'true'
        run: npm run test:web

      - name: Test mobile
        if: needs.changes.outputs.mobile == 'true'
        run: npm run test:mobile

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.shared == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Generate coverage reports
        run: |
          if [ "${{ needs.changes.outputs.shared }}" == "true" ]; then
            npm run test:shared:coverage
          fi
          if [ "${{ needs.changes.outputs.backend }}" == "true" ]; then
            npm run test:backend:coverage
          fi
          if [ "${{ needs.changes.outputs.web }}" == "true" ]; then
            npm run test:web:coverage
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Build shared package
        if: needs.changes.outputs.shared == 'true'
        run: npm run build:shared

      - name: Build backend
        if: needs.changes.outputs.backend == 'true'
        run: npm run build:backend

      - name: Build web
        if: needs.changes.outputs.web == 'true'
        run: npm run build:web

      - name: Cache build artifacts
        if: matrix.node-version == 20
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            web/build
            shared/dist
          key: build-${{ github.sha }}

  mobile-build:
    name: Mobile Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.mobile == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Build Android bundle (validation only)
        run: |
          cd mobile
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-bundle.js \
            --assets-dest android-assets

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            web/build
            shared/dist
          key: build-${{ github.sha }}

      - name: Deploy to Azure Staging
        run: |
          echo "Deploying to staging environment"
          # Add actual Azure deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
            web/build
            shared/dist
          key: build-${{ github.sha }}

      - name: Deploy to Azure Production
        run: |
          echo "Deploying to production environment"
          # Add actual Azure deployment commands here
